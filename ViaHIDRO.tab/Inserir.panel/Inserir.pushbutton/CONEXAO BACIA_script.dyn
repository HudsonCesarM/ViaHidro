{
  "Uuid": "ec84ffdd-9cf9-4c57-8a15-37be905879fe",
  "IsCustomNode": false,
  "Description": "",
  "Name": "SELECIONAR ELEMENTOS VINCULO BACIA",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [
    {
      "Id": "10a6609e27164631998787ab609253f6",
      "Name": "2. CATEGORIA DO ELEMENTO NO VINCULO",
      "Type": "dropdownSelection",
      "Value": "OST_PlumbingFixtures",
      "Description": "Todas as categorias incorporadas.",
      "SelectedIndex": 536
    },
    {
      "Id": "7588236dbc5c4c5aa69c00dd19cb0f35",
      "Name": "1. SELECIONE O VINCULO",
      "Type": "hostSelection",
      "Value": "66bac1bc-d216-4a40-a22b-d2e2a7063bf4-00937aed",
      "Description": "Selecione um elemento do modelo no documento.",
      "SelectedIndex": 0
    },
    {
      "Id": "3e8e53a1d0124002b7c2f37348619c53",
      "Name": "3. NOME DO ELEMENTO NO VINCULO",
      "Type": "string",
      "Value": "BACIA",
      "Description": "Cria uma sequência de caracteres.",
      "SelectedIndex": 0
    }
  ],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 536,
      "SelectedString": "OST_PlumbingFixtures",
      "NodeType": "ExtensionNode",
      "Id": "10a6609e27164631998787ab609253f6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "aa15c3b69eb64fc181f086ba49b7e520",
          "Name": "Category",
          "Description": "A categoria selecionada.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Todas as categorias incorporadas."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetLocation",
      "Id": "08ea3379e4da41a8b2ceebbea4936dca",
      "Inputs": [
        {
          "Id": "a74f2a06f6cd40d5b4ea81553c545125",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c32ec40728b546ae86200c4419edc890",
          "Name": "Geometry",
          "Description": "Geometria da localização",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obter localização de um elemento existente\n\nElement.GetLocation ( ): Geometry"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.LinkElement.OfCategory@Revit.Elements.Element,Revit.Elements.Category",
      "Id": "eb733e6cde174ae5921522771b91dd41",
      "Inputs": [
        {
          "Id": "9be85e2938c44a29be95a939654b6188",
          "Name": "linkInstance",
          "Description": "Input the Revit Link Instance.\n\nElement",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e42944d6b0c041758f287f909db9ddd9",
          "Name": "category",
          "Description": "Input the LinkElement Category.\n\nCategory",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "30762e9a8bec4fb6963dcb0ffd4f39a8",
          "Name": "LinkElement[]",
          "Description": "LinkElement[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get LinkElements from a linked Revit document (a LinkInstance) by Category. LinkElements are optimized for use with BimorphNodes Element and BoundingBox nodes and are compatible with all other Dynamo nodes that accept Elements as inputs. \r\rVisit bimorph.com/bimorph-nodes for support\n\nLinkElement.OfCategory (linkInstance: Element, category: Category): LinkElement[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "71124b2b227d472eb5cc446d74fdf86d",
      "Inputs": [
        {
          "Id": "ffbf136566e940cca425a5a355eda0a3",
          "Name": "list",
          "Description": "Lista a filtrar.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7f7067bd64ec46f6ab4da343b0739ad8",
          "Name": "mask",
          "Description": "Lista de booleanos representando uma máscara.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ca487e5e8e1342b39d8ae15e93045609",
          "Name": "in",
          "Description": "Os itens cujo índice de máscara é verdadeiro.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9214673e93be4dce8d45e90aab985ca9",
          "Name": "out",
          "Description": "Os itens cujo índice de máscara é falso.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filtra uma sequência examinando os índices correspondentes em lista separada de booleanos.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Nodes.DSModelElementSelection, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "InstanceId": [
        "66bac1bc-d216-4a40-a22b-d2e2a7063bf4-00937aed"
      ],
      "Id": "7588236dbc5c4c5aa69c00dd19cb0f35",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "da0f46e76f784dac960c3bdafa228a45",
          "Name": "Element",
          "Description": "Os elementos selecionados.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled"
    },
    {
      "ConcreteType": "DSRevitNodesUI.FamilyTypes, DSRevitNodesUI",
      "SelectedIndex": 308,
      "SelectedString": "PVC Esgoto_Adaptador para Saida de Vaso Sanitario:Bacia Sanitária BS (6 UHC)",
      "NodeType": "ExtensionNode",
      "Id": "0270d2e9d75449fea5ffa5d0acc916f5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5bd3d98a98ee4603b4f44a937e2cf03a",
          "Name": "Family Type",
          "Description": "O Family Type selecionado",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Todos os tipos de família disponíveis no documento."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyInstance.ByPointAndLevel@Revit.Elements.FamilyType,Autodesk.DesignScript.Geometry.Point,Revit.Elements.Level",
      "Id": "303684e690fd484dbb23d961287f2e4e",
      "Inputs": [
        {
          "Id": "1ee5ecee4f5243c7a74843eba062cea3",
          "Name": "familyType",
          "Description": "Tipo de família. Também chamado de Símbolo de família.\n\nFamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "21e1ee0c69424bd4b61c1fe0593dfe5a",
          "Name": "point",
          "Description": "Ponto em metros.\n\nPoint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8075434bfdeb4e4a8f94633f2cdc573c",
          "Name": "level",
          "Description": "Nível para hospedar a instância da família.\n\nLevel",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "441797bafd57464cb32357c1b489fab3",
          "Name": "FamilyInstance",
          "Description": "FamilyInstance",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Colocar um Revit FamilyInstance de acordo com o FamilyType (também conhecido como FamilySymbol no Revit API) e suas coordenadas no espaço real, e seu nível\n\nFamilyInstance.ByPointAndLevel (familyType: FamilyType, point: Point, level: Level): FamilyInstance"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "f35a4902-48b5-40f2-8d0a-98edae74a72b",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "73a6e93b94e14776b5f54e9aecefe838",
      "Inputs": [
        {
          "Id": "e48a1f0810974f17b13e7430ee3f4cff",
          "Name": "familyInstance",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "43f1310053454480b1346166e188d30d",
          "Name": "vector",
          "Description": "valor de retorno",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Gets the hand orientation of a hosted object (e.g. a window or a door)"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import Point\r\n\r\n# Entrada 0: Vetores fornecidos (lista de vetores de orientação)\r\norientation_vectors = IN[0]\r\n\r\n# Entrada 1: Pontos fornecidos (lista de pontos dos elementos - saída do Element.GetLocation)\r\nelement_points = IN[1]\r\n\r\n# Lista para armazenar os pontos modificados\r\nmodified_points = []\r\n\r\n# Iterar sobre os vetores e pontos simultaneamente\r\nfor i in range(min(len(orientation_vectors), len(element_points))):\r\n    vector = orientation_vectors[i]\r\n    point = element_points[i]\r\n    \r\n    # Modificar o ponto com base nas condições dos vetores\r\n    new_x = point.X\r\n    new_y = point.Y\r\n    new_z = point.Z  # Manter o valor Z inalterado\r\n    \r\n    # Condição para o vetor X = -1\r\n    if vector.X == -1:\r\n        new_y += 30  # Acrescentar 30 ao valor de Y do ponto\r\n    \r\n    # Condição para o vetor X = 1\r\n    if vector.X == 1:\r\n        new_y -= 30  # Subtrair 30 do valor de Y do ponto\r\n    \r\n    # Condição para o vetor Y = -1\r\n    if vector.Y == -1:\r\n        new_x -= 30  # Subtrair 30 do valor de X do ponto\r\n    \r\n    # Condição para o vetor Y = 1\r\n    if vector.Y == 1:\r\n        new_x += 30  # Acrescentar 30 ao valor de X do ponto\r\n    \r\n    # Criar o novo ponto usando o Point.ByCoordinates do Dynamo\r\n    new_point = Point.ByCoordinates(new_x, new_y, new_z)\r\n    modified_points.append(new_point)\r\n\r\n# Saída: Lista dos pontos modificados no formato Point.ByCoordinates do Dynamo\r\nOUT = modified_points\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "d72b9c10e5df4e27b9f8f69cd844906e",
      "Inputs": [
        {
          "Id": "02341b53f4e242e1aeff4d04ae604344",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "78ce0df89fe24112b818ad9f01224709",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "607ab218d77240209cab49dd81ef7536",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\n\r\n# Obter o documento atual do Revit\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Entrada 0: Nomes dos níveis fornecidos (lista de strings)\r\nlevel_names = IN[0]\r\n\r\n# Lista para armazenar os objetos de nível\r\nlevel_objects = []\r\n\r\n# Iterar sobre os nomes de nível fornecidos\r\nfor name in level_names:\r\n    # Tentar encontrar o nível pelo nome\r\n    try:\r\n        # Buscar todos os níveis no documento\r\n        collector = FilteredElementCollector(doc).OfClass(Level)\r\n        \r\n        # Verificar se algum nível tem o nome correspondente\r\n        matching_level = None\r\n        for level in collector:\r\n            if level.Name == name:\r\n                matching_level = level\r\n                break\r\n        \r\n        # Adicionar o nível encontrado à lista, ou None se não encontrado\r\n        if matching_level:\r\n            level_objects.append(matching_level)\r\n        else:\r\n            level_objects.append(None)  # Se não houver correspondência, adicionar None\r\n    except:\r\n        # Se houver erro, adicionar None à lista\r\n        level_objects.append(None)\r\n\r\n# Saída: Lista de objetos `Level`\r\nOUT = level_objects\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "70a119cf042940ee8f97c8ffecd4c7a3",
      "Inputs": [
        {
          "Id": "5e974dcf4630485fb9221f49a4c78a76",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a500df3aa2c345f7a0165aff58fdf5b7",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "bb764f9a948d4bbbbbe2887b41f31dfc",
      "Inputs": [
        {
          "Id": "460360a436a242999de357631c41f7c0",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "85a809d824404d70967287418c8d1b9a",
          "Name": "parameterName",
          "Description": "O nome do parâmetro cujos valores você deseja obter.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "05382454e4214a188202a33ef4de8fbd",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obter o valor de um os parâmetros do elemento.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Nível de tabela\";",
      "Id": "f279da0f03474aa7b1387e9c856c7af4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a14de81dc5b5418190c991c03621753d",
          "Name": "",
          "Description": "Valor da expressão na linha 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Permite que o código DesignScript seja criado diretamente"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Level.Name",
      "Id": "ebdf77baad214d78af8c8c181ee372b1",
      "Inputs": [
        {
          "Id": "b42bf6e2d9b34f1dbe767883b3c707ac",
          "Name": "level",
          "Description": "Revit.Elements.Level",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5788c14f7b404e78b7e0605d82c3efc7",
          "Name": "string",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "O nome do nível\n\nLevel.Name: string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.LinkElement.Element",
      "Id": "d621be687e304d8f9dc1b714444f0973",
      "Inputs": [
        {
          "Id": "ca2264aa67a8473f8558d0f2c555ec6e",
          "Name": "linkElement",
          "Description": "Revit.LinkElement",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "83dbff6ab1bd41bea04b77fcf18661af",
          "Name": "LinkElement",
          "Description": "LinkElement",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Element stored in this LinkElement. Use the Element with any nodes that are incompatible with the LinkElement. \r\rVisit bimorph.com/bimorph-nodes for support\n\nLinkElement.Element: Element"
    },
    {
      "ConcreteType": "CoreNodeModels.FromObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "df67e608c10d421ca3c1eb760a336846",
      "Inputs": [
        {
          "Id": "c43c97597b8f4640aa0b952c26dd4bda",
          "Name": "object",
          "Description": "O objeto a ser serializado",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "95f029d19a7e4548b0eccc6f94e47129",
          "Name": "string",
          "Description": "Representação da sequência de caracteres do objeto",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Converta um objeto em uma representação de sequência de caracteres."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "BACIA",
      "Id": "3e8e53a1d0124002b7c2f37348619c53",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4cef69451f534b1f84c79edf26f0ae80",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Cria uma sequência de caracteres."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.String.Contains@string,string,bool",
      "Id": "a419da9a52ca4ddf97e094c53e536a44",
      "Inputs": [
        {
          "Id": "c9b0602437714b46aeb22f45bd75fba7",
          "Name": "string",
          "Description": "Sequência de caracteres na qual pesquisar\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8224e1434fd3405c8ded255747c28267",
          "Name": "searchFor",
          "Description": "Subsequência de caracteres que desejar pesquisar\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "84b7f705df514e05bea96a9b9ed14b70",
          "Name": "ignoreCase",
          "Description": "Se a comparação leva em conta as maiúsculas e minúsculas\n\nbool\nValor padrão : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "586e5fbd5d8242489029d29f27c59668",
          "Name": "bool",
          "Description": "Se a sequência de caracteres contém a subsequência de caracteres",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Determina se a determinada sequência de caracteres contém a determinada subsequência de caracteres.\n\nString.Contains (string: string, searchFor: string, ignoreCase: bool = false): bool"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "RevitModel.Element.SetParameterValueByName@Revit.Elements.Element,string,var",
      "Id": "6c4ea54190624f6792bc640720e52942",
      "Inputs": [
        {
          "Id": "22a67b82a0f845aa94f87ca9717f47ee",
          "Name": "element",
          "Description": "element want get parameter\n\nElement",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e7d6195c90794992bd2c4e3956b9bb95",
          "Name": "parameterName",
          "Description": "parameter name want set\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "66d4c91577e444bea8c722292e2c66a8",
          "Name": "values",
          "Description": "value need set[object]\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a15eb1ff109c4e8f9c983112ea08365c",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Set Parameter Value By Name Smarter\n\nElement.SetParameterValueByName (element: Element, parameterName: string, values: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Elevação do nível\";\n0;",
      "Id": "871db69c98d94faebacb712fd5523481",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a4fe2cab8683484abe84f2314ac7733b",
          "Name": "",
          "Description": "Valor da expressão na linha 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0c491b1d17f04e5bb21784652f32f88e",
          "Name": "",
          "Description": "Valor da expressão na linha 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Permite que o código DesignScript seja criado diretamente"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Importando as bibliotecas do Revit e Windows Forms\r\nimport clr\r\nclr.AddReference(\"RevitServices\")\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import *\r\n\r\n# Adicionando referência para System.Windows.Forms\r\nclr.AddReference(\"System.Windows.Forms\")\r\nfrom System.Windows.Forms import MessageBox, MessageBoxButtons\r\n\r\n# Obtendo o documento atual do Revit\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Função para obter a unidade de comprimento\r\ndef get_length_unit_format(doc):\r\n    # Obtendo as unidades do documento\r\n    units = doc.GetUnits()\r\n\r\n    # Acessando as opções de formato para o comprimento\r\n    format_options = units.GetFormatOptions(SpecTypeId.Length)\r\n\r\n    # Obtendo o ID da unidade de comprimento atual\r\n    unit_type_id = format_options.GetUnitTypeId()\r\n\r\n    # Retornando a unidade de comprimento atual\r\n    return unit_type_id\r\n\r\n# Função para definir a unidade de comprimento para centímetros\r\ndef set_length_unit_to_centimeters(doc):\r\n    # Iniciando uma transação para modificar as unidades\r\n    TransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\n    # Obtendo as unidades atuais\r\n    units = doc.GetUnits()\r\n\r\n    # Criando novas opções de formato para definir como centímetros\r\n    format_options = FormatOptions(UnitTypeId.Centimeters)\r\n\r\n    # Definindo as opções para o comprimento (Length)\r\n    units.SetFormatOptions(SpecTypeId.Length, format_options)\r\n\r\n    # Aplicando as mudanças ao documento\r\n    doc.SetUnits(units)\r\n\r\n    # Finalizando a transação\r\n    TransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Obtendo a unidade de comprimento atual\r\nlength_unit = get_length_unit_format(doc)\r\n\r\n# Verificando se a unidade não é centímetros e mudando se necessário\r\nif length_unit != UnitTypeId.Centimeters:\r\n    set_length_unit_to_centimeters(doc)\r\n    result = \"Unidade de comprimento alterada para Centímetros\"\r\nelse:\r\n    result = \"A unidade de comprimento já está em Centímetros\"\r\n\r\n# Exibir uma janela pop-up para o usuário confirmar a mensagem\r\nMessageBox.Show(result, \"Confirmação\", MessageBoxButtons.OK)\r\n\r\n# Retornar 1 para o Dynamo após o usuário clicar em OK\r\nOUT = 1\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "d1f4944bc18c4480927a1508e5f6d969",
      "Inputs": [
        {
          "Id": "41f70e8dc5264075902d2368ecc2a431",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ba098298596a42048891f6e6f794c023",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#TEMPLATE Python Script by BIM Coder\r\n#Versão 1.0 - 08/24\r\n\r\n#---IMPORTAÇÕES\r\n# Sistema e .NET\r\nimport clr\r\nimport System\r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\n\r\n# Biblioteca de Geometria do Dynamo\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# Nós do Dynamo\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\n# Documentos e Transações\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n# DB da API do Revit\r\nimport Autodesk\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\n\r\n# Interface do usuário da API do Revit\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import *\r\n\r\nfrom Autodesk.Revit.UI.Selection import ObjectType\r\n\r\n# Documentos e Interfaces\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = uiapp.ActiveUIDocument\r\n\r\n#---ENTRADA 0: Verificar se a unidade foi alterada para centímetros\r\nunit_check = IN[0]\r\n\r\n# Verificando se a entrada 0 é igual a 1 (unidade foi alterada para centímetros)\r\nif unit_check == 1:\r\n    try:\r\n        # Solicitar ao usuário que selecione um objeto do tipo Element (por exemplo, paredes, janelas, etc.)\r\n        selected_reference = uidoc.Selection.PickObject(ObjectType.Element)\r\n        # Obter o elemento a partir da referência\r\n        selected_element = uidoc.Document.GetElement(selected_reference)\r\n\r\n        # Saída para o Dynamo (elemento Revit selecionado)\r\n        OUT = selected_element\r\n\r\n    except Exception as e:\r\n        # Se houver um erro (como se o usuário cancelar a seleção), retornar uma mensagem de erro\r\n        OUT = str(e)\r\nelse:\r\n    # Se a entrada 0 não for 1, exibir uma mensagem dizendo que a unidade não foi alterada\r\n    OUT = \"A unidade não foi alterada para centímetros, seleção de elemento não permitida.\"\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "59e0406d535a4a76ae3f20e8e2b780c8",
      "Inputs": [
        {
          "Id": "5e2035a537684d82925ca07a1e1ee31a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7144610222e748d58dbb0d46fce760ce",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    }
  ],
  "Connectors": [
    {
      "Start": "aa15c3b69eb64fc181f086ba49b7e520",
      "End": "e42944d6b0c041758f287f909db9ddd9",
      "Id": "b97cb302fa6640c0a32c607861e5853e",
      "IsHidden": "False"
    },
    {
      "Start": "c32ec40728b546ae86200c4419edc890",
      "End": "78ce0df89fe24112b818ad9f01224709",
      "Id": "27d8f7732f9d414fbfec05cca00d3199",
      "IsHidden": "False"
    },
    {
      "Start": "30762e9a8bec4fb6963dcb0ffd4f39a8",
      "End": "ffbf136566e940cca425a5a355eda0a3",
      "Id": "2ffbc397dbc341d9bca8d00ea6eec094",
      "IsHidden": "False"
    },
    {
      "Start": "30762e9a8bec4fb6963dcb0ffd4f39a8",
      "End": "ca2264aa67a8473f8558d0f2c555ec6e",
      "Id": "e5250d6e1bf04a9ab8c1b906079c81a8",
      "IsHidden": "False"
    },
    {
      "Start": "ca487e5e8e1342b39d8ae15e93045609",
      "End": "a74f2a06f6cd40d5b4ea81553c545125",
      "Id": "d86a3cc1d0234b8b8736f7dcd940fb54",
      "IsHidden": "False"
    },
    {
      "Start": "ca487e5e8e1342b39d8ae15e93045609",
      "End": "e48a1f0810974f17b13e7430ee3f4cff",
      "Id": "6036d17d173a4096a6c4c5f92d21e461",
      "IsHidden": "False"
    },
    {
      "Start": "ca487e5e8e1342b39d8ae15e93045609",
      "End": "460360a436a242999de357631c41f7c0",
      "Id": "0b415f964608406cafb812e7ba73df8e",
      "IsHidden": "False"
    },
    {
      "Start": "5bd3d98a98ee4603b4f44a937e2cf03a",
      "End": "1ee5ecee4f5243c7a74843eba062cea3",
      "Id": "4307f43ad6aa4a14bdc17096d56346f1",
      "IsHidden": "False"
    },
    {
      "Start": "441797bafd57464cb32357c1b489fab3",
      "End": "22a67b82a0f845aa94f87ca9717f47ee",
      "Id": "abd6a9fa34fb4de5aebfed3e8295c0a6",
      "IsHidden": "False"
    },
    {
      "Start": "43f1310053454480b1346166e188d30d",
      "End": "02341b53f4e242e1aeff4d04ae604344",
      "Id": "7c781f0bf3624bffbe488c2693aa6a60",
      "IsHidden": "False"
    },
    {
      "Start": "607ab218d77240209cab49dd81ef7536",
      "End": "21e1ee0c69424bd4b61c1fe0593dfe5a",
      "Id": "fef99c93c4e247a2a8952bea6b35b758",
      "IsHidden": "False"
    },
    {
      "Start": "a500df3aa2c345f7a0165aff58fdf5b7",
      "End": "8075434bfdeb4e4a8f94633f2cdc573c",
      "Id": "d382372cc43d4d84bb59f327af8884aa",
      "IsHidden": "False"
    },
    {
      "Start": "05382454e4214a188202a33ef4de8fbd",
      "End": "b42bf6e2d9b34f1dbe767883b3c707ac",
      "Id": "7839bc3a27974b059a4426129cf725ae",
      "IsHidden": "False"
    },
    {
      "Start": "a14de81dc5b5418190c991c03621753d",
      "End": "85a809d824404d70967287418c8d1b9a",
      "Id": "8e44ffef5e6644e5933ee4e3f4f8a411",
      "IsHidden": "False"
    },
    {
      "Start": "5788c14f7b404e78b7e0605d82c3efc7",
      "End": "5e974dcf4630485fb9221f49a4c78a76",
      "Id": "3ed09fd516ad43bc9c2e0fce21ee2c19",
      "IsHidden": "False"
    },
    {
      "Start": "83dbff6ab1bd41bea04b77fcf18661af",
      "End": "c43c97597b8f4640aa0b952c26dd4bda",
      "Id": "e65bea9bb384480da908c8ebd04bee15",
      "IsHidden": "False"
    },
    {
      "Start": "95f029d19a7e4548b0eccc6f94e47129",
      "End": "c9b0602437714b46aeb22f45bd75fba7",
      "Id": "e753d1cc0c7843af90753aaee65d51ed",
      "IsHidden": "False"
    },
    {
      "Start": "4cef69451f534b1f84c79edf26f0ae80",
      "End": "8224e1434fd3405c8ded255747c28267",
      "Id": "bf4842d86b94406d8bd224a4e6be2f6d",
      "IsHidden": "False"
    },
    {
      "Start": "586e5fbd5d8242489029d29f27c59668",
      "End": "7f7067bd64ec46f6ab4da343b0739ad8",
      "Id": "a13325d4217e47d6be3f44004435ecfb",
      "IsHidden": "False"
    },
    {
      "Start": "a4fe2cab8683484abe84f2314ac7733b",
      "End": "e7d6195c90794992bd2c4e3956b9bb95",
      "Id": "7e1b6a145c614299915214f5af23fd78",
      "IsHidden": "False"
    },
    {
      "Start": "0c491b1d17f04e5bb21784652f32f88e",
      "End": "66d4c91577e444bea8c722292e2c66a8",
      "Id": "09a54efa9fd34577adf179624e2629b7",
      "IsHidden": "False"
    },
    {
      "Start": "ba098298596a42048891f6e6f794c023",
      "End": "5e2035a537684d82925ca07a1e1ee31a",
      "Id": "bce78e2208974f299e71919d399b3ca6",
      "IsHidden": "False"
    },
    {
      "Start": "7144610222e748d58dbb0d46fce760ce",
      "End": "9be85e2938c44a29be95a939654b6188",
      "Id": "b5e85f8c8f764f939f54f7fded9159e5",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [
    "f35a4902-48b5-40f2-8d0a-98edae74a72b"
  ],
  "NodeLibraryDependencies": [
    {
      "Name": "bimorphNodes",
      "Version": "5.1.3",
      "ReferenceType": "Package",
      "Nodes": [
        "eb733e6cde174ae5921522771b91dd41",
        "d621be687e304d8f9dc1b714444f0973"
      ]
    },
    {
      "Name": "Clockwork for Dynamo 2.x",
      "Version": "2.4.0",
      "ReferenceType": "Package",
      "Nodes": [
        "73a6e93b94e14776b5f54e9aecefe838"
      ]
    },
    {
      "Name": "DynaMEP",
      "Version": "2.0.1",
      "ReferenceType": "Package",
      "Nodes": [
        "6c4ea54190624f6792bc640720e52942"
      ]
    }
  ],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.13",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "2.0",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "Nenhum",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [
    {
      "NodeId": "303684e6-90fd-484d-bb23-d961287f2e4e",
      "Binding": {
        "ByPointAndLevel_InClassDecl-1_InFunctionScope-1_Instance0_303684e6-90fd-484d-bb23-d961287f2e4e": ""
      }
    }
  ],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.13.1.3887",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Visualização do plano de fundo",
      "EyeX": 3676.804443359375,
      "EyeY": -616.737548828125,
      "EyeZ": 1298.008544921875,
      "LookX": 76.387939453125,
      "LookY": -82.75341796875,
      "LookZ": -369.2080078125,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "2. CATEGORIA DO ELEMENTO NO VINCULO",
        "ShowGeometry": true,
        "Id": "10a6609e27164631998787ab609253f6",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -350.28150891288374,
        "Y": 441.6479933699195
      },
      {
        "Name": "Element.GetLocation",
        "ShowGeometry": true,
        "Id": "08ea3379e4da41a8b2ceebbea4936dca",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2658.6858890984749,
        "Y": 23.731037109671888
      },
      {
        "Name": "LinkElement.OfCategory",
        "ShowGeometry": true,
        "Id": "eb733e6cde174ae5921522771b91dd41",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 144.2647333634809,
        "Y": 189.792474228601
      },
      {
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": true,
        "Id": "71124b2b227d472eb5cc446d74fdf86d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1903.3667618431436,
        "Y": 192.16561144555055
      },
      {
        "Name": "1. SELECIONE O VINCULO",
        "ShowGeometry": true,
        "Id": "7588236dbc5c4c5aa69c00dd19cb0f35",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -330.36394747463686,
        "Y": -61.441855791262952
      },
      {
        "Name": "Family Types",
        "ShowGeometry": true,
        "Id": "0270d2e9d75449fea5ffa5d0acc916f5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3984.5725785774757,
        "Y": -231.83692698642756
      },
      {
        "Name": "FamilyInstance.ByPointAndLevel",
        "ShowGeometry": true,
        "Id": "303684e690fd484dbb23d961287f2e4e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4789.4665210691146,
        "Y": -24.853153492982074
      },
      {
        "Name": "FamilyInstance.HandOrientation",
        "ShowGeometry": true,
        "Id": "73a6e93b94e14776b5f54e9aecefe838",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2647.3226855863763,
        "Y": 183.40679557549379
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "d72b9c10e5df4e27b9f8f69cd844906e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3185.5890853847263,
        "Y": 16.161494807201052
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "70a119cf042940ee8f97c8ffecd4c7a3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3402.3596386978847,
        "Y": 408.44931917853381
      },
      {
        "Name": "Element.GetParameterValueByName",
        "ShowGeometry": true,
        "Id": "bb764f9a948d4bbbbbe2887b41f31dfc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2625.1742856751371,
        "Y": 412.5520442895355
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "f279da0f03474aa7b1387e9c856c7af4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2322.656830296833,
        "Y": 557.57922980343972
      },
      {
        "Name": "Level.Name",
        "ShowGeometry": true,
        "Id": "ebdf77baad214d78af8c8c181ee372b1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3078.1078465091496,
        "Y": 411.76293203227181
      },
      {
        "Name": "LinkElement.Element",
        "ShowGeometry": true,
        "Id": "d621be687e304d8f9dc1b714444f0973",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 542.63820717551425,
        "Y": 501.28784857068734
      },
      {
        "Name": "String from Object",
        "ShowGeometry": true,
        "Id": "df67e608c10d421ca3c1eb760a336846",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 868.37590797610017,
        "Y": 504.27150039987134
      },
      {
        "Name": "3. NOME DO ELEMENTO NO VINCULO",
        "ShowGeometry": true,
        "Id": "3e8e53a1d0124002b7c2f37348619c53",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1103.9521440036908,
        "Y": 706.278281588174
      },
      {
        "Name": "String.Contains",
        "ShowGeometry": true,
        "Id": "a419da9a52ca4ddf97e094c53e536a44",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1544.0411684674332,
        "Y": 502.86470831576844
      },
      {
        "Name": "Element.SetParameterValueByName",
        "ShowGeometry": true,
        "Id": "6c4ea54190624f6792bc640720e52942",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5535.5860934867778,
        "Y": -20.985994192904769
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "871db69c98d94faebacb712fd5523481",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5192.3789839555611,
        "Y": 108.81355837962326
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "d1f4944bc18c4480927a1508e5f6d969",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -537.51630658025658,
        "Y": 195.33751002531577
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "59e0406d535a4a76ae3f20e8e2b780c8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -246.88273695917383,
        "Y": 192.59906383284945
      }
    ],
    "Annotations": [
      {
        "Id": "127b4da2cdb34ec78cecd9351b5c4488",
        "Title": "familia para inserir no eixo Z",
        "DescriptionText": "<Clique duas vezes aqui para editar a descrição do grupo>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "0270d2e9d75449fea5ffa5d0acc916f5"
        ],
        "HasNestedGroups": false,
        "Left": 3974.5725785774757,
        "Top": -304.83692698642756,
        "Width": 743.0,
        "Height": 205.0,
        "FontSize": 36.0,
        "InitialTop": -231.83692698642756,
        "InitialHeight": 145.0,
        "TextblockHeight": 63.0,
        "Background": "#FFFF7BAC"
      }
    ],
    "X": 631.47417458014809,
    "Y": 201.56289287059897,
    "Zoom": 0.18012383044145047
  }
}