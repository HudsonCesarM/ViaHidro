{
  "Uuid": "cbe26318-2308-453d-b8a1-35a528bdf381",
  "IsCustomNode": false,
  "Description": "",
  "Name": "LOCALIZAÇÃOH_script",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import *\r\n\r\n# Função para listar os elementos principais e suas famílias aninhadas\r\ndef get_all_elements(element, collected_ids):\r\n    element_list = []\r\n    \r\n    # Verificar se o elemento é uma instância de família ou um elemento de sistema (como Pipe)\r\n    if isinstance(element, Element):  # Usando Element como verificação genérica\r\n        # Adicionar o elemento principal à lista, se ainda não foi adicionado\r\n        if element.Id not in collected_ids:\r\n            element_list.append(element)\r\n            collected_ids.add(element.Id)\r\n        \r\n        # Se o elemento for uma FamilyInstance, verificar subcomponentes\r\n        if isinstance(element, FamilyInstance):\r\n            sub_elements = element.GetSubComponentIds()\r\n            if not sub_elements:\r\n                return element_list\r\n            \r\n            # Se o elemento tiver subcomponentes, adicionar os aninhados\r\n            for sub_elem_id in sub_elements:\r\n                sub_elem = doc.GetElement(sub_elem_id)\r\n                if isinstance(sub_elem, FamilyInstance) and sub_elem.Id not in collected_ids:\r\n                    element_list.append(sub_elem)\r\n                    collected_ids.add(sub_elem.Id)\r\n                    # Recursivamente buscar subcomponentes dos aninhados\r\n                    element_list.extend(get_all_elements(sub_elem, collected_ids))\r\n    \r\n    return element_list\r\n\r\n# Coletando o documento ativo\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Entrada 0 - elementos selecionados\r\ninput_elements = UnwrapElement(IN[0])\r\n\r\n# Inicializando a lista de todos os elementos (principais e aninhados)\r\nall_elements = []\r\n\r\n# Inicializando um conjunto para evitar duplicatas com base no ID dos elementos\r\ncollected_ids = set()\r\n\r\n# Verificando todos os elementos e suas famílias aninhadas\r\nfor element in input_elements:\r\n    if isinstance(element, Element):  # Verificação genérica de que o objeto é um elemento do Revit\r\n        all_elements.extend(get_all_elements(element, collected_ids))\r\n\r\n# Saída - lista de todos os elementos, incluindo principais e aninhados\r\nOUT = all_elements\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "ce7b310b4f5840128c8dcbcfef6b333a",
      "Inputs": [
        {
          "Id": "2c6b012eee404a8e8902f57f28b6b14a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2fa40388c4894a1e9935be9c27067ca4",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#TEMPLATE Python Script by BIM Coder\r\n#Versão 1.0 - 08/24\r\n\r\n#---IMPORTAÇÕES\r\n# Sistema e .NET\r\nimport clr\r\nimport sys\r\nimport System\r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\n\r\n# Biblioteca de Geometria do Dynamo\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# Nós do Dynamo\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\n# Documentos e Transações\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n# DB da API do Revit\r\nimport Autodesk\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\n\r\n# Interface do usuário da API do Revit\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import *\r\n\r\nfrom Autodesk.Revit.UI.Selection import ObjectType\r\n\r\n# Documentos e Interfaces\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = uiapp.ActiveUIDocument\r\n\r\n#---CLASSES E FUNÇÕES\r\n\r\n#---SCRIPT\r\n\r\n# Solicitar ao usuário que selecione múltiplos objetos do tipo Element (por exemplo, paredes, janelas, etc.)\r\n\r\nselected_references = uidoc.Selection.PickObjects(ObjectType.Element)\r\n\r\n# Obter os elementos a partir das referências\r\nselected_elements = [uidoc.Document.GetElement(reference) for reference in selected_references]\r\n\r\n# Saída para o Dynamo (lista de elementos Revit)\r\nOUT = selected_elements\r\n\r\n\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "825b04f512ea41718d56dd606839aaea",
      "Inputs": [
        {
          "Id": "95c445136a2c4c499fba7d55bfdb1d05",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "da0c38019a9c480e82add2ddc59ea1bc",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('RevitServices')\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitAPIUI')\r\n\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nfrom Autodesk.Revit.DB import Element\r\n\r\n# Obter o documento ativo do Revit\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Obter os elementos selecionados a partir de IN[0] e o texto da IN[1]\r\nelements = UnwrapElement(IN[0])  # Desembrulha os elementos do Dynamo\r\ntext_to_set = IN[1]  # Texto a ser inserido no parâmetro \"ORÇAMENTO TIPO DE SISTEMA\"\r\n\r\n# Iniciar uma transação para modificar os parâmetros no Revit\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\n# Iterar sobre os elementos e definir o valor no parâmetro \"ORÇAMENTO TIPO DE SISTEMA\"\r\nfor element in elements:\r\n    marca_param = element.LookupParameter(\"ORÇAMENTO LOCALIZAÇÃO\")\r\n    if marca_param and not marca_param.IsReadOnly:\r\n        marca_param.Set(text_to_set)\r\n\r\n# Finalizar a transação\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Saída\r\nOUT = \"Texto atualizado no parâmetro 'ORÇAMENTO LOCALIZAÇÃO' para {} elementos.\".format(len(elements))\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "7a5f647326f942139957ce35579ca02f",
      "Inputs": [
        {
          "Id": "661b57295c9d477aaf90b5c9ed3b27c8",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "afe75101b87247dabf39739c84d753c5",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c7198fda5264432f83467a9589e0efb6",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('System.Windows.Forms')\r\nclr.AddReference('System.Drawing')\r\n\r\nfrom System.Windows.Forms import Application, Form, Label, TextBox, Button, FormStartPosition\r\nfrom System.Drawing import Point, Size, Color\r\n\r\nclass MyForm(Form):\r\n    def __init__(self, theme='Dark'):\r\n        # Configurações do Formulário\r\n        self.Text = \"Parâmetro ORÇAMENTO LOCALIZAÇÃO\"\r\n        self.Size = Size(350, 200)\r\n        self.StartPosition = FormStartPosition.CenterScreen\r\n        self.ShowIcon = False\r\n        self.MaximizeBox = False\r\n        self.MinimizeBox = False\r\n\r\n        # Configuração do tema\r\n        if theme == 'Light':\r\n            self.BackColor = Color.White\r\n            self.ForeColor = Color.Black\r\n        else:\r\n            self.BackColor = Color.FromArgb(45, 45, 48)  # Dark theme\r\n            self.ForeColor = Color.White\r\n\r\n        self.create_form()\r\n        self.create_ok_button()\r\n\r\n    def create_form(self):\r\n        \"\"\"Cria a Label e o campo de entrada de texto.\"\"\"\r\n        lbl = Label()\r\n        lbl.Text = \"Digite o texto:\"\r\n        lbl.Location = Point(20, 20)\r\n        lbl.Size = Size(150, 30)\r\n        self.Controls.Add(lbl)\r\n\r\n        self.txt_input = TextBox()\r\n        self.txt_input.Location = Point(20, 50)\r\n        self.txt_input.Size = Size(240, 30)\r\n        self.Controls.Add(self.txt_input)\r\n\r\n    def create_ok_button(self):\r\n        \"\"\"Cria o botão OK para capturar o texto e fechar o formulário.\"\"\"\r\n        btn_ok = Button()\r\n        btn_ok.Text = \"OK\"\r\n        btn_ok.Location = Point((self.ClientSize.Width - 100) // 2, 90)\r\n        btn_ok.Size = Size(100, 30)\r\n        btn_ok.Click += self.on_ok\r\n        self.Controls.Add(btn_ok)\r\n\r\n    def on_ok(self, sender, event):\r\n        \"\"\"Captura o texto digitado e fecha o formulário.\"\"\"\r\n        self.user_input = self.txt_input.Text\r\n        self.Close()\r\n\r\n# Criação do formulário\r\ntheme = \"Dark\"  # Você pode mudar para \"Light\" se quiser o tema claro\r\nform = MyForm(theme)\r\nApplication.Run(form)\r\n\r\n# O texto inserido pelo usuário será armazenado na variável 'form.user_input'\r\nOUT = form.user_input\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "ed5b91f6e06447fca3888802f50ec73e",
      "Inputs": [
        {
          "Id": "0c8a017ad2224656b8023a9847e490c4",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "920095525d5743ec988bfb9a15cc824b",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    }
  ],
  "Connectors": [
    {
      "Start": "2fa40388c4894a1e9935be9c27067ca4",
      "End": "661b57295c9d477aaf90b5c9ed3b27c8",
      "Id": "44634bd693c343d785f2fad5160fe120",
      "IsHidden": "False"
    },
    {
      "Start": "da0c38019a9c480e82add2ddc59ea1bc",
      "End": "2c6b012eee404a8e8902f57f28b6b14a",
      "Id": "951143531cbe413e9d9c28ce8ed7d203",
      "IsHidden": "False"
    },
    {
      "Start": "920095525d5743ec988bfb9a15cc824b",
      "End": "afe75101b87247dabf39739c84d753c5",
      "Id": "49b16a86b2194128ae8ff609a5c46abf",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.13",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "2.0",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "Nenhum",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.13.1.3887",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Visualização do plano de fundo",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "ce7b310b4f5840128c8dcbcfef6b333a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 952.90318197061413,
        "Y": 380.74494129748769
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "825b04f512ea41718d56dd606839aaea",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 710.5007138964279,
        "Y": 380.21281561392323
      },
      {
        "Name": "PREENCHER O PARAMETRO",
        "ShowGeometry": true,
        "Id": "7a5f647326f942139957ce35579ca02f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1310.068677098418,
        "Y": 379.00789662352508
      },
      {
        "Name": "TEXTO",
        "ShowGeometry": true,
        "Id": "ed5b91f6e06447fca3888802f50ec73e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 971.79144646825785,
        "Y": 521.34297572696141
      }
    ],
    "Annotations": [],
    "X": -206.56681262801328,
    "Y": -93.866675113746851,
    "Zoom": 0.6803117008283821
  }
}